---
import { getCollection, type CollectionEntry, render } from 'astro:content'
import CommonLayout from '../../layouts/CommonLayout.astro'
import Prose from '../../components/Prose.astro'
import CalendarIcon from '../../components/icons/CalendarIcon.astro'
import SlidesIcon from '../../components/icons/SlidesIcon.astro'
import VideoIcon from '../../components/icons/VideoIcon.astro'
import { SITE_TITLE } from '../../consts'

export async function getStaticPaths() {
  const speakingEntries = await getCollection('speaking')
  // Sort by date descending (newest first)
  const sortedEntries = speakingEntries.sort(
    (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
  )

  return sortedEntries.map((entry, index) => ({
    params: { slug: entry.id },
    props: {
      entry,
      prevTalk: index < sortedEntries.length - 1 ? sortedEntries[index + 1] : null,
      nextTalk: index > 0 ? sortedEntries[index - 1] : null,
    },
  }))
}

type Props = {
  entry: CollectionEntry<'speaking'>
  prevTalk: CollectionEntry<'speaking'> | null
  nextTalk: CollectionEntry<'speaking'> | null
}

const { entry, prevTalk, nextTalk } = Astro.props
const { Content } = await render(entry)

// Helper function to extract video ID from YouTube URL
function getYouTubeId(url: string): string | null {
  const regex =
    /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/
  const match = url.match(regex)
  return match ? match[1] : null
}

// Helper function to get country flag emoji
function getCountryFlag(location: string): string | null {
  const countryMap: Record<string, string> = {
    italy: '🇮🇹',
    ireland: '🇮🇪',
    'united kingdom': '🇬🇧',
    uk: '🇬🇧',
    usa: '🇺🇸',
    'united states': '🇺🇸',
    germany: '🇩🇪',
    france: '🇫🇷',
    spain: '🇪🇸',
    portugal: '🇵🇹',
    netherlands: '🇳🇱',
    belgium: '🇧🇪',
    austria: '🇦🇹',
    switzerland: '🇨🇭',
    poland: '🇵🇱',
    sweden: '🇸🇪',
    norway: '🇳🇴',
    denmark: '🇩🇰',
    finland: '🇫🇮',
    czechia: '🇨🇿',
    'czech republic': '🇨🇿',
    australia: '🇦🇺',
    canada: '🇨🇦',
    japan: '🇯🇵',
    india: '🇮🇳',
    singapore: '🇸🇬',
  }

  if (!location) return null

  const lowerLocation = location.toLowerCase()
  for (const [country, flag] of Object.entries(countryMap)) {
    if (lowerLocation.includes(country)) {
      return flag
    }
  }
  return null
}

const youtubeId = entry.data.video_link
  ? getYouTubeId(entry.data.video_link)
  : null
const isRemote =
  entry.data.event_location?.toLowerCase().includes('remote') ||
  !entry.data.event_location
const countryFlag = isRemote
  ? null
  : getCountryFlag(entry.data.event_location || '')
---

<CommonLayout
  section="speaking"
  seo={{
    title: `${entry.data.title} - ${SITE_TITLE}`,
    description: (() => {
      const type = entry.data.is_workshop ? 'Workshop' : 'Talk'
      const location = isRemote
        ? 'remotely'
        : entry.data.event_city
          ? `in ${entry.data.event_city}`
          : ''
      return `${type} "${entry.data.title}" presented at ${entry.data.event_name} ${location} on ${entry.data.event_days}. ${entry.data.slides_link ? 'Slides available.' : ''} ${entry.data.video_link ? 'Video recording available.' : ''} ${entry.data.podcast_link ? 'Podcast episode available.' : ''}`.trim()
    })(),
    ogType: 'article',
  }}
>
  <div class="bg-bg-500">
    <div class="mx-auto max-w-(--breakpoint-xl) py-16 px-8">
      <!-- Header -->
      <div class="mb-8">
        <a
          href="/speaking"
          class="text-primary-500 hover:underline mb-4 inline-block"
        >
          ← Back to Speaking
        </a>
        <h1 class="text-text-500 text-4xl lg:text-5xl font-bold mb-4">
          {entry.data.title}
        </h1>

        <!-- Event Info -->
        <div class="flex flex-wrap gap-4 items-center text-text-400 mb-6">
          <div class="flex items-center gap-2">
            <CalendarIcon class="w-5 h-5" />
            <span>{entry.data.event_days}</span>
          </div>
          <span>•</span>
          <a
            href={entry.data.event_link || '#'}
            class="hover:text-primary-500 font-semibold"
            target="_blank"
            rel="noopener noreferrer"
          >
            {entry.data.event_name}
          </a>
          {
            !isRemote && entry.data.event_city && (
              <>
                <span>•</span>
                <div class="flex items-center gap-2">
                  {countryFlag && <span class="text-2xl">{countryFlag}</span>}
                  <span>{entry.data.event_city}</span>
                </div>
              </>
            )
          }
          {
            isRemote && (
              <>
                <span>•</span>
                <span>🌍 Remote</span>
              </>
            )
          }
        </div>

        <!-- Workshop Badge -->
        {
          entry.data.is_workshop && (
            <span class="inline-block bg-accent-500 text-white px-3 py-1 rounded-full text-sm font-semibold mb-4">
              Workshop
            </span>
          )
        }

        <!-- Co-speakers -->
        {
          entry.data.with && entry.data.with.length > 0 && (
            <div class="mb-6">
              <p class="text-text-400 mb-2">With:</p>
              <div class="flex flex-wrap gap-3">
                {entry.data.with.map((speaker) => (
                  <a
                    href={speaker.link || '#'}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex items-center gap-2 bg-bg-300 hover:bg-bg-200 rounded-full pl-1 pr-4 py-1 transition-colors"
                    title={speaker.name}
                  >
                    {speaker.image ? (
                      <img
                        src={speaker.image}
                        alt={speaker.name}
                        class="w-8 h-8 rounded-full object-cover border-2 border-bg-500"
                      />
                    ) : (
                      <div class="w-8 h-8 rounded-full bg-primary-500 flex items-center justify-center text-white font-bold text-sm border-2 border-bg-500">
                        {speaker.name.charAt(0).toUpperCase()}
                      </div>
                    )}
                    <span class="text-text-500 font-medium">
                      {speaker.name}
                    </span>
                  </a>
                ))}
              </div>
            </div>
          )
        }

        <!-- Action Buttons -->
        <div class="flex flex-wrap gap-4">
          {
            entry.data.slides_link && (
              <a
                href={entry.data.slides_link}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 bg-primary-500 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                <SlidesIcon class="w-5 h-5" />
                View Slides
              </a>
            )
          }
          {
            entry.data.video_link && (
              <a
                href={entry.data.video_link}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 bg-accent-500 hover:bg-accent-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                <VideoIcon class="w-5 h-5" />
                Watch Video
              </a>
            )
          }
          {
            entry.data.podcast_link && (
              <a
                href={entry.data.podcast_link}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 bg-secondary-500 hover:bg-secondary-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                <svg
                  class="w-5 h-5"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M12 2a4 4 0 014 4v6a4 4 0 11-8 0V6a4 4 0 014-4zm0 2a2 2 0 00-2 2v6a2 2 0 104 0V6a2 2 0 00-2-2zm-6 8a1 1 0 011 1 5 5 0 0010 0 1 1 0 112 0 7 7 0 01-6 6.93V22h3a1 1 0 110 2H8a1 1 0 110-2h3v-2.07A7 7 0 015 13a1 1 0 011-1z" />
                </svg>
                Listen to Podcast
              </a>
            )
          }
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Main Content -->
        <div class="lg:col-span-2">
          <!-- Abstract -->
          <div class="bg-bg-300 rounded-lg p-6 mb-8">
            <h2 class="text-text-500 text-2xl font-bold mb-4">Abstract</h2>
            <Prose>
              <Content />
            </Prose>
          </div>

          <!-- Video Embed -->
          {
            youtubeId && (
              <div class="bg-bg-300 rounded-lg p-6 mb-8">
                <h2 class="text-text-500 text-2xl font-bold mb-4">Video</h2>
                <div class="aspect-video rounded-lg overflow-hidden">
                  <iframe
                    src={`https://www.youtube.com/embed/${youtubeId}`}
                    title={entry.data.title}
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen
                    class="w-full h-full"
                  />
                </div>
              </div>
            )
          }

          <!-- Slides Embed -->
          {
            entry.data.embed_slides && (
              <div class="bg-bg-300 rounded-lg p-6 mb-8">
                <h2 class="text-text-500 text-2xl font-bold mb-4">Slides</h2>
                <div class="aspect-video rounded-lg overflow-hidden">
                  <iframe
                    src={(() => {
                      const url = entry.data.embed_slides

                      // SpeakerDeck - use player URL or convert to player format
                      if (url.includes('speakerdeck.com')) {
                        return url
                      }

                      // Slides.com - add /embed suffix
                      if (url.includes('slides.com')) {
                        const baseUrl = url.replace(
                          '/slides.com/',
                          '//slides.com/'
                        )
                        return baseUrl.endsWith('/embed')
                          ? baseUrl
                          : `${baseUrl}/embed`
                      }

                      // Google Drive Presentations - convert to embed format
                      if (url.includes('docs.google.com/presentation')) {
                        // Extract presentation ID from various formats
                        const idMatch =
                          url.match(/\/d\/e\/([A-Za-z0-9_-]+)/) ||
                          url.match(/\/d\/([A-Za-z0-9_-]+)/)

                        if (idMatch) {
                          const presentationId = idMatch[1]
                          // Check if it's already an /e/ ID or a direct ID
                          const embedId = url.includes('/d/e/')
                            ? presentationId
                            : `2PACX-${presentationId}`
                          return `https://docs.google.com/presentation/d/e/${embedId}/embed?start=false&loop=false&delayms=1000`
                        }
                      }

                      // PDF
                      if (url.endsWith('.pdf')) {
                        return `${url}#toolbar=0&view=FitH`
                      }

                      // other: use URL directly
                      return url
                    })()}
                    title={`${entry.data.title} - Slides`}
                    allowfullscreen
                    class="w-full h-full"
                  />
                </div>
              </div>
            )
          }

          <!-- Podcast Embed -->
          {
            entry.data.podcast_embed && (
              <div class="bg-bg-300 rounded-lg p-6">
                <h2 class="text-text-500 text-2xl font-bold mb-4">Podcast</h2>
                <div class="aspect-video rounded-lg overflow-hidden">
                  <iframe
                    src={entry.data.podcast_embed}
                    title={`${entry.data.title} - Podcast`}
                    allowfullscreen
                    class="w-full h-full"
                  />
                </div>
              </div>
            )
          }
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1">
          <!-- Location Map -->
          {
            !isRemote && entry.data.event_location_gps && (
              <div class="bg-bg-300 rounded-lg p-6 mb-8">
                <h3 class="text-text-500 text-xl font-bold mb-4">Location</h3>
                <p class="text-text-400 text-sm mb-4">
                  {entry.data.event_location}
                </p>
                <div class="aspect-video rounded-lg overflow-hidden">
                  <div
                    id="location_map"
                    data-gps={entry.data.event_location_gps}
                    data-title={entry.data.title}
                    data-location={entry.data.event_location}
                    class="w-full h-full"
                  />
                </div>
              </div>
            )
          }

          <!-- Event Details -->
          <div class="bg-bg-300 rounded-lg p-6">
            <h3 class="text-text-500 text-xl font-bold mb-4">Event Details</h3>
            <dl class="space-y-3">
              <div>
                <dt class="text-text-400 text-sm font-semibold">Date</dt>
                <dd class="text-text-500">{entry.data.event_days}</dd>
              </div>
              <div>
                <dt class="text-text-400 text-sm font-semibold">Event</dt>
                <dd class="text-text-500">{entry.data.event_name}</dd>
              </div>
              {
                !isRemote && entry.data.event_location && (
                  <div>
                    <dt class="text-text-400 text-sm font-semibold">
                      Location
                    </dt>
                    <dd class="text-text-500">{entry.data.event_city}</dd>
                  </div>
                )
              }
              <div>
                <dt class="text-text-400 text-sm font-semibold">Type</dt>
                <dd class="text-text-500"
                  >{entry.data.is_workshop ? 'Workshop' : 'Talk'}</dd
                >
              </div>
              <div>
                <dt class="text-text-400 text-sm font-semibold">Language</dt>
                <dd class="text-text-500"
                  >{
                    entry.data.language === 'it_IT'
                      ? 'Italian 🇮🇹'
                      : 'English 🇬🇧'
                  }</dd
                >
              </div>
            </dl>
          </div>
        </div>
      </div>

      <!-- Previous/Next Navigation -->
      <div class="max-w-(--breakpoint-xl) mx-auto px-8 py-8">
        <div class="flex justify-between items-center border-t border-bg-600 pt-8">
          <div class="flex-1">
            {
              prevTalk && (
                <a
                  href={`/speaking/${prevTalk.id}`}
                  class="group flex items-start gap-3 hover:text-primary-500 transition-colors"
                >
                  <svg
                    class="w-6 h-6 mt-1 flex-shrink-0 text-text-400 group-hover:text-primary-500 transition-colors"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M15 19l-7-7 7-7"
                    />
                  </svg>
                  <div>
                    <div class="text-sm text-text-400 mb-1">Previous Talk</div>
                    <div class="text-text-500 font-semibold group-hover:text-primary-500 transition-colors">
                      {prevTalk.data.title}
                    </div>
                    <div class="text-sm text-text-400 mt-1">
                      {prevTalk.data.event_name} • {prevTalk.data.event_days}
                    </div>
                  </div>
                </a>
              )
            }
          </div>

          <a
            href="/speaking"
            class="flex-shrink-0 mx-4 px-4 py-2 text-text-400 hover:text-primary-500 transition-colors text-center"
          >
            <svg
              class="w-6 h-6 mx-auto mb-1"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"
              />
            </svg>
            <div class="text-sm">All Talks</div>
          </a>

          <div class="flex-1 flex justify-end">
            {
              nextTalk && (
                <a
                  href={`/speaking/${nextTalk.id}`}
                  class="group flex items-start gap-3 text-right hover:text-primary-500 transition-colors"
                >
                  <div>
                    <div class="text-sm text-text-400 mb-1">Next Talk</div>
                    <div class="text-text-500 font-semibold group-hover:text-primary-500 transition-colors">
                      {nextTalk.data.title}
                    </div>
                    <div class="text-sm text-text-400 mt-1">
                      {nextTalk.data.event_name} • {nextTalk.data.event_days}
                    </div>
                  </div>
                  <svg
                    class="w-6 h-6 mt-1 flex-shrink-0 text-text-400 group-hover:text-primary-500 transition-colors"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </a>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</CommonLayout>

<script>
  // Location map with OpenStreetMap and Leaflet
  const mapElement = document.getElementById('location_map')
  if (mapElement) {
    // @ts-ignore
    import('https://unpkg.com/leaflet/dist/leaflet-src.esm.js').then(
      (Leaflet) => {
        const gps = mapElement.dataset.gps
        const title = mapElement.dataset.title
        const location = mapElement.dataset.location

        if (gps) {
          const coords = gps.split(',').map(parseFloat)

          const OpenStreetMap_Mapnik = Leaflet.tileLayer(
            'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
            {
              maxZoom: 19,
              attribution:
                '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            },
          )

          const map = Leaflet.map('location_map').setView(coords, 13)
          OpenStreetMap_Mapnik.addTo(map)

          Leaflet.marker(coords)
            .bindPopup(`<strong>${title}</strong><br/>${location}`)
            .addTo(map)
        }
      },
    )
  }
</script>

<style is:global>
  /* Leaflet required styles from 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css' */
  .leaflet-pane,
  .leaflet-tile,
  .leaflet-marker-icon,
  .leaflet-marker-shadow,
  .leaflet-tile-container,
  .leaflet-pane > svg,
  .leaflet-pane > canvas,
  .leaflet-zoom-box,
  .leaflet-image-layer,
  .leaflet-layer {
    position: absolute;
    left: 0;
    top: 0;
  }
  .leaflet-container {
    overflow: hidden;
  }
  .leaflet-tile,
  .leaflet-marker-icon,
  .leaflet-marker-shadow {
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    -webkit-user-drag: none;
  }
  .leaflet-tile::selection {
    background: transparent;
  }
  .leaflet-safari .leaflet-tile {
    image-rendering: -webkit-optimize-contrast;
  }
  .leaflet-safari .leaflet-tile-container {
    width: 1600px;
    height: 1600px;
    -webkit-transform-origin: 0 0;
  }
  .leaflet-marker-icon,
  .leaflet-marker-shadow {
    display: block;
  }
  .leaflet-container .leaflet-overlay-pane svg {
    max-width: none !important;
    max-height: none !important;
  }
  .leaflet-container .leaflet-marker-pane img,
  .leaflet-container .leaflet-shadow-pane img,
  .leaflet-container .leaflet-tile-pane img,
  .leaflet-container img.leaflet-image-layer,
  .leaflet-container .leaflet-tile {
    max-width: none !important;
    max-height: none !important;
    width: auto;
    padding: 0;
  }
  .leaflet-container img.leaflet-tile {
    mix-blend-mode: plus-lighter;
  }
  .leaflet-container.leaflet-touch-zoom {
    -ms-touch-action: pan-x pan-y;
    touch-action: pan-x pan-y;
  }
  .leaflet-container.leaflet-touch-drag {
    -ms-touch-action: pinch-zoom;
    touch-action: none;
    touch-action: pinch-zoom;
  }
  .leaflet-container.leaflet-touch-drag.leaflet-touch-zoom {
    -ms-touch-action: none;
    touch-action: none;
  }
  .leaflet-container {
    -webkit-tap-highlight-color: transparent;
  }
  .leaflet-container a {
    -webkit-tap-highlight-color: rgba(51, 181, 229, 0.4);
  }
  .leaflet-tile {
    filter: inherit;
    visibility: hidden;
  }
  .leaflet-tile-loaded {
    visibility: inherit;
  }
  .leaflet-zoom-box {
    width: 0;
    height: 0;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    z-index: 800;
  }
  .leaflet-overlay-pane svg {
    -moz-user-select: none;
  }
  .leaflet-pane {
    z-index: 400;
  }
  .leaflet-tile-pane {
    z-index: 200;
  }
  .leaflet-overlay-pane {
    z-index: 400;
  }
  .leaflet-shadow-pane {
    z-index: 500;
  }
  .leaflet-marker-pane {
    z-index: 600;
  }
  .leaflet-tooltip-pane {
    z-index: 650;
  }
  .leaflet-popup-pane {
    z-index: 700;
  }
  .leaflet-map-pane canvas {
    z-index: 100;
  }
  .leaflet-map-pane svg {
    z-index: 200;
  }
  .leaflet-vml-shape {
    width: 1px;
    height: 1px;
  }
  .lvml {
    behavior: url(#default#VML);
    display: inline-block;
    position: absolute;
  }
  .leaflet-control {
    position: relative;
    z-index: 800;
    pointer-events: visiblePainted;
    pointer-events: auto;
  }
  .leaflet-top,
  .leaflet-bottom {
    position: absolute;
    z-index: 1000;
    pointer-events: none;
  }
  .leaflet-top {
    top: 0;
  }
  .leaflet-right {
    right: 0;
  }
  .leaflet-bottom {
    bottom: 0;
  }
  .leaflet-left {
    left: 0;
  }
  .leaflet-control {
    float: left;
    clear: both;
  }
  .leaflet-right .leaflet-control {
    float: right;
  }
  .leaflet-top .leaflet-control {
    margin-top: 10px;
  }
  .leaflet-bottom .leaflet-control {
    margin-bottom: 10px;
  }
  .leaflet-left .leaflet-control {
    margin-left: 10px;
  }
  .leaflet-right .leaflet-control {
    margin-right: 10px;
  }
  .leaflet-fade-anim .leaflet-popup {
    opacity: 0;
    -webkit-transition: opacity 0.2s linear;
    -moz-transition: opacity 0.2s linear;
    transition: opacity 0.2s linear;
  }
  .leaflet-fade-anim .leaflet-map-pane .leaflet-popup {
    opacity: 1;
  }
  .leaflet-zoom-animated {
    -webkit-transform-origin: 0 0;
    -ms-transform-origin: 0 0;
    transform-origin: 0 0;
  }
  svg.leaflet-zoom-animated {
    will-change: transform;
  }
  .leaflet-zoom-anim .leaflet-zoom-animated {
    -webkit-transition: -webkit-transform 0.25s cubic-bezier(0, 0, 0.25, 1);
    -moz-transition: -moz-transform 0.25s cubic-bezier(0, 0, 0.25, 1);
    transition: transform 0.25s cubic-bezier(0, 0, 0.25, 1);
  }
  .leaflet-zoom-anim .leaflet-tile,
  .leaflet-pan-anim .leaflet-tile {
    -webkit-transition: none;
    -moz-transition: none;
    transition: none;
  }
  .leaflet-zoom-anim .leaflet-zoom-hide {
    visibility: hidden;
  }
  .leaflet-interactive {
    cursor: pointer;
  }
  .leaflet-grab {
    cursor: -webkit-grab;
    cursor: -moz-grab;
    cursor: grab;
  }
  .leaflet-crosshair,
  .leaflet-crosshair .leaflet-interactive {
    cursor: crosshair;
  }
  .leaflet-popup-pane,
  .leaflet-control {
    cursor: auto;
  }
  .leaflet-dragging .leaflet-grab,
  .leaflet-dragging .leaflet-grab .leaflet-interactive,
  .leaflet-dragging .leaflet-marker-draggable {
    cursor: move;
    cursor: -webkit-grabbing;
    cursor: -moz-grabbing;
    cursor: grabbing;
  }
  .leaflet-marker-icon,
  .leaflet-marker-shadow,
  .leaflet-image-layer,
  .leaflet-pane > svg path,
  .leaflet-tile-container {
    pointer-events: none;
  }
  .leaflet-marker-icon.leaflet-interactive,
  .leaflet-image-layer.leaflet-interactive,
  .leaflet-pane > svg path.leaflet-interactive,
  svg.leaflet-image-layer.leaflet-interactive path {
    pointer-events: visiblePainted;
    pointer-events: auto;
  }
  .leaflet-container {
    background: #ddd;
    outline-offset: 1px;
  }
  .leaflet-container a {
    color: #0078a8;
  }
  .leaflet-zoom-box {
    border: 2px dotted #38f;
    background: rgba(255, 255, 255, 0.5);
  }
  .leaflet-container {
    font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif;
    font-size: 12px;
    font-size: 0.75rem;
    line-height: 1.5;
  }
  .leaflet-bar {
    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);
    border-radius: 4px;
  }
  .leaflet-bar a {
    background-color: #fff;
    border-bottom: 1px solid #ccc;
    width: 26px;
    height: 26px;
    line-height: 26px;
    display: block;
    text-align: center;
    text-decoration: none;
    color: black;
  }
  .leaflet-bar a,
  .leaflet-control-layers-toggle {
    background-position: 50% 50%;
    background-repeat: no-repeat;
    display: block;
  }
  .leaflet-bar a:hover,
  .leaflet-bar a:focus {
    background-color: #f4f4f4;
  }
  .leaflet-bar a:first-child {
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
  }
  .leaflet-bar a:last-child {
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
    border-bottom: none;
  }
  .leaflet-bar a.leaflet-disabled {
    cursor: default;
    background-color: #f4f4f4;
    color: #bbb;
  }
  .leaflet-touch .leaflet-bar a {
    width: 30px;
    height: 30px;
    line-height: 30px;
  }
  .leaflet-touch .leaflet-bar a:first-child {
    border-top-left-radius: 2px;
    border-top-right-radius: 2px;
  }
  .leaflet-touch .leaflet-bar a:last-child {
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
  }
  .leaflet-control-zoom-in,
  .leaflet-control-zoom-out {
    font:
      bold 18px 'Lucida Console',
      Monaco,
      monospace;
    text-indent: 1px;
  }
  .leaflet-touch .leaflet-control-zoom-in,
  .leaflet-touch .leaflet-control-zoom-out {
    font-size: 22px;
  }
  .leaflet-control-layers {
    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.4);
    background: #fff;
    border-radius: 5px;
  }
  .leaflet-control-layers-toggle {
    background-image: url(/images/layers.png);
    width: 36px;
    height: 36px;
  }
  .leaflet-retina .leaflet-control-layers-toggle {
    background-image: url(/images/layers-2x.png);
    background-size: 26px 26px;
  }
  .leaflet-touch .leaflet-control-layers-toggle {
    width: 44px;
    height: 44px;
  }
  .leaflet-control-layers .leaflet-control-layers-list,
  .leaflet-control-layers-expanded .leaflet-control-layers-toggle {
    display: none;
  }
  .leaflet-control-layers-expanded .leaflet-control-layers-list {
    display: block;
    position: relative;
  }
  .leaflet-control-layers-expanded {
    padding: 6px 10px 6px 6px;
    color: #333;
    background: #fff;
  }
  .leaflet-control-layers-scrollbar {
    overflow-y: scroll;
    overflow-x: hidden;
    padding-right: 5px;
  }
  .leaflet-control-layers-selector {
    margin-top: 2px;
    position: relative;
    top: 1px;
  }
  .leaflet-control-layers label {
    display: block;
    font-size: 13px;
    font-size: 1.08333em;
  }
  .leaflet-control-layers-separator {
    height: 0;
    border-top: 1px solid #ddd;
    margin: 5px -10px 5px -6px;
  }
  .leaflet-default-icon-path {
    background-image: url(/images/marker-icon.png);
  }
  .leaflet-container .leaflet-control-attribution {
    background: #fff;
    background: rgba(255, 255, 255, 0.8);
    margin: 0;
  }
  .leaflet-control-attribution,
  .leaflet-control-scale-line {
    padding: 0 5px;
    color: #333;
    line-height: 1.4;
  }
  .leaflet-control-attribution a {
    text-decoration: none;
  }
  .leaflet-control-attribution a:hover,
  .leaflet-control-attribution a:focus {
    text-decoration: underline;
  }
  .leaflet-attribution-flag {
    display: inline !important;
    vertical-align: baseline !important;
    width: 1em;
    height: 0.6669em;
  }
  .leaflet-left .leaflet-control-scale {
    margin-left: 5px;
  }
  .leaflet-bottom .leaflet-control-scale {
    margin-bottom: 5px;
  }
  .leaflet-control-scale-line {
    border: 2px solid #777;
    border-top: none;
    line-height: 1.1;
    padding: 2px 5px 1px;
    white-space: nowrap;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    background: rgba(255, 255, 255, 0.8);
    text-shadow: 1px 1px #fff;
  }
  .leaflet-control-scale-line:not(:first-child) {
    border-top: 2px solid #777;
    border-bottom: none;
    margin-top: -2px;
  }
  .leaflet-control-scale-line:not(:first-child):not(:last-child) {
    border-bottom: 2px solid #777;
  }
  .leaflet-touch .leaflet-control-attribution,
  .leaflet-touch .leaflet-control-layers,
  .leaflet-touch .leaflet-bar {
    box-shadow: none;
  }
  .leaflet-touch .leaflet-control-layers,
  .leaflet-touch .leaflet-bar {
    border: 2px solid rgba(0, 0, 0, 0.2);
    background-clip: padding-box;
  }
  .leaflet-popup {
    position: absolute;
    text-align: center;
    margin-bottom: 20px;
  }
  .leaflet-popup-content-wrapper {
    padding: 1px;
    text-align: left;
    border-radius: 12px;
  }
  .leaflet-popup-content {
    margin: 13px 24px 13px 20px;
    line-height: 1.3;
    font-size: 13px;
    font-size: 1.08333em;
    min-height: 1px;
  }
  .leaflet-popup-content p {
    margin: 17px 0;
    margin: 1.3em 0;
  }
  .leaflet-popup-tip-container {
    width: 40px;
    height: 20px;
    position: absolute;
    left: 50%;
    margin-top: -1px;
    margin-left: -20px;
    overflow: hidden;
    pointer-events: none;
  }
  .leaflet-popup-tip {
    width: 17px;
    height: 17px;
    padding: 1px;
    margin: -10px auto 0;
    pointer-events: auto;
    -webkit-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
  }
  .leaflet-popup-content-wrapper,
  .leaflet-popup-tip {
    background: white;
    color: #333;
    box-shadow: 0 3px 14px rgba(0, 0, 0, 0.4);
  }
  .leaflet-container a.leaflet-popup-close-button {
    position: absolute;
    top: 0;
    right: 0;
    border: none;
    text-align: center;
    width: 24px;
    height: 24px;
    font:
      16px/24px Tahoma,
      Verdana,
      sans-serif;
    color: #757575;
    text-decoration: none;
    background: transparent;
  }
  .leaflet-container a.leaflet-popup-close-button:hover,
  .leaflet-container a.leaflet-popup-close-button:focus {
    color: #585858;
  }
  .leaflet-popup-scrolled {
    overflow: auto;
  }
  .leaflet-oldie .leaflet-popup-content-wrapper {
    -ms-zoom: 1;
  }
  .leaflet-oldie .leaflet-popup-tip {
    width: 24px;
    margin: 0 auto;
    -ms-filter: 'progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678)';
    filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678);
  }
  .leaflet-oldie .leaflet-control-zoom,
  .leaflet-oldie .leaflet-control-layers,
  .leaflet-oldie .leaflet-popup-content-wrapper,
  .leaflet-oldie .leaflet-popup-tip {
    border: 1px solid #999;
  }
  .leaflet-div-icon {
    background: #fff;
    border: 1px solid #666;
  }
  .leaflet-tooltip {
    position: absolute;
    padding: 6px;
    background-color: #fff;
    border: 1px solid #fff;
    border-radius: 3px;
    color: #222;
    white-space: nowrap;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    pointer-events: none;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);
  }
  .leaflet-tooltip.leaflet-interactive {
    cursor: pointer;
    pointer-events: auto;
  }
  .leaflet-tooltip-top:before,
  .leaflet-tooltip-bottom:before,
  .leaflet-tooltip-left:before,
  .leaflet-tooltip-right:before {
    position: absolute;
    pointer-events: none;
    border: 6px solid transparent;
    background: transparent;
    content: '';
  }
  .leaflet-tooltip-bottom {
    margin-top: 6px;
  }
  .leaflet-tooltip-top {
    margin-top: -6px;
  }
  .leaflet-tooltip-bottom:before,
  .leaflet-tooltip-top:before {
    left: 50%;
    margin-left: -6px;
  }
  .leaflet-tooltip-top:before {
    bottom: 0;
    margin-bottom: -12px;
    border-top-color: #fff;
  }
  .leaflet-tooltip-bottom:before {
    top: 0;
    margin-top: -12px;
    margin-left: -6px;
    border-bottom-color: #fff;
  }
  .leaflet-tooltip-left {
    margin-left: -6px;
  }
  .leaflet-tooltip-right {
    margin-left: 6px;
  }
  .leaflet-tooltip-left:before,
  .leaflet-tooltip-right:before {
    top: 50%;
    margin-top: -6px;
  }
  .leaflet-tooltip-left:before {
    right: 0;
    margin-right: -12px;
    border-left-color: #fff;
  }
  .leaflet-tooltip-right:before {
    left: 0;
    margin-left: -12px;
    border-right-color: #fff;
  }
  @media print {
    .leaflet-control {
      -webkit-print-color-adjust: exact;
      print-color-adjust: exact;
    }
  }
</style>
