---
import { getImage } from 'astro:assets'
import profilePicPlaceholders from '../../public/loige/FRAME_placeholder_480.json'
import HeroPicFrame0 from '../../public/loige/FRAME_0.png'
import HeroPicFrame1 from '../../public/loige/FRAME_1.png'
import HeroPicFrame2 from '../../public/loige/FRAME_2.png'
import HeroPicFrame3 from '../../public/loige/FRAME_3.png'
import HeroPicFrame4 from '../../public/loige/FRAME_4.png'
import HeroPicMusicFrame0 from '../../public/loige/FRAME_m_0.png'
import HeroPicMusicFrame1 from '../../public/loige/FRAME_m_1.png'
import HeroPicMusicFrame2 from '../../public/loige/FRAME_m_2.png'
import HeroPicMusicFrame3 from '../../public/loige/FRAME_m_3.png'
import HeroPicMusicFrame4 from '../../public/loige/FRAME_m_4.png'

const HERO_PIC_SIZE = 480
const WEBP = 0
const AVIF = 1
const PNG = 2

const profilePicFrames = await Promise.all(
  [
    HeroPicFrame0,
    HeroPicFrame1,
    HeroPicFrame2,
    HeroPicFrame3,
    HeroPicFrame4,
    HeroPicMusicFrame0,
    HeroPicMusicFrame1,
    HeroPicMusicFrame2,
    HeroPicMusicFrame3,
    HeroPicMusicFrame4,
  ].map((src) =>
    Promise.all([
      getImage({
        src,
        format: 'webp',
        width: HERO_PIC_SIZE,
        height: HERO_PIC_SIZE,
      }),
      getImage({
        src,
        format: 'avif',
        width: HERO_PIC_SIZE,
        height: HERO_PIC_SIZE,
      }),
      getImage({
        src,
        format: 'png',
        width: HERO_PIC_SIZE,
        height: HERO_PIC_SIZE,
      }),
    ]),
  ),
)
---

<div
  id="hero"
  class="pt-4 sm:pt-6 lg:pt-10 bg-bg-500 [background:radial-gradient(circle_at_30%_60%,_var(--color-primary-200)_0%,transparent_30%),radial-gradient(circle_at_80%_90%,_var(--color-secondary-300)_0%,transparent_30%),radial-gradient(circle_at_bottom,_var(--color-accent-300)_0%,var(--color-bg-500)_60%)]"
>
  <div
    class="flex justify-center items-end relative mx-auto max-w-screen-xl h-[400px] sm:h-[640px] overflow-hidden [clip-path:border-box]"
  >
    <div
      class="absolute top-[3.5rem] sm:top-[6rem] lg:top-[5rem] flex flex-col justify-center z-[3]"
    >
      <h1
        class="text-4xl sm:text-7xl lg:text-8xl font-bold text-primary-700 z-[3] drop-shadow-lg text-center"
      >
        Luciano Mammino
      </h1>
    </div>
    <div
      class="absolute top-[6.5rem] sm:top-[11rem] flex flex-col justify-center z-[1]"
    >
      <div class="font-serif sm:text-3xl lg:text-4xl text-text-500 z-[1]">
        Cloud Architect &amp; Full Stack Developer
      </div>
    </div>
    <div class="flex justify-center align-bottom z-[2]">
      <div class="w-[300px] h-[300px] sm:w-[480px] sm:h-[480px]">
        <picture>
          <source
            data-frames={JSON.stringify(
              profilePicFrames.map((f) => f[WEBP].src),
            )}
            srcset={profilePicPlaceholders[WEBP]}
            type="image/webp"
          />
          <source
            data-frames={JSON.stringify(
              profilePicFrames.map((f) => f[AVIF].src),
            )}
            srcset={profilePicPlaceholders[AVIF]}
            type="image/avif"
          />
          <source
            data-frames={JSON.stringify(
              profilePicFrames.map((f) => f[PNG].src),
            )}
            srcset={profilePicPlaceholders[PNG]}
            type="image/png"
          />
          <img
            src={profilePicPlaceholders[PNG]}
            id="profile-picture"
            alt="Luciano Mammino"
            class="z-[2] fixed [transition:filter_.5s_ease-out_0s] w-[300px] h-[300px] sm:w-[480px] sm:h-[480px] animate-hero-pulse"
            width="480"
            height="480"
          />
        </picture>
      </div>
    </div>
    <div
      id="music"
      class="hidden w-80 sm:w-96 bg-zinc-900 border border-zinc-700 absolute z-40 bottom-4 p-2 rounded-xl shadow-lg bg-opacity-90 hover:bg-opacity-100 animate-all"
    >
      <a
        class="flex items-center gap-2"
        href="https://www.last.fm/user/loige"
        rel="nofollow noopener noreferrer"
        target="_blank"
      >
        <img
          id="music-image"
          class="w-16 h-16 rounded-xl"
          src="/loige/no-music-cover.png"
          alt="cover"
        />
        <div
          class="pr-2 flex-1 whitespace-nowrap overflow-hidden text-ellipsis"
        >
          <div class="flex items-center gap-2">
            <span class="flex gap-[0.1em] items-end">
              <span
                class="w-1 h-2 block bg-lime-500 animate-[squish_ease-in-out_400ms_infinite]"
              ></span>
              <span
                class="w-1 h-2 block bg-lime-500 animate-[squish_400ms_ease-in-out_150ms_infinite]"
              ></span>
              <span
                class="w-1 h-2 block bg-lime-500 animate-[squish_400ms_ease-in-out_100ms_infinite]"
              ></span>
              <span
                class="w-1 h-2 block bg-lime-500 animate-[squish_400ms_ease-in-out_50ms_infinite]"
              ></span>
            </span>
            <span
              id="music-name"
              class="text-sm min-w-0 font-bold text-lime-500 text-ellipsis whitespace-nowrap overflow-hidden"
              >Song name</span
            >
          </div>
          <div>
            <p
              id="music-artist-name"
              class="text-xs min-w-0 text-lime-600 text-ellipsis whitespace-nowrap overflow-hidden"
              >Band name</p
            >
            <p
              id="music-album"
              class="text-xs min-w-0 text-lime-600 text-ellipsis whitespace-nowrap overflow-hidden"
              >Album name</p
            >
          </div>
        </div>
      </a>
    </div>
  </div>
</div>
<script>
  const PNG = 2
  const PROFILE_NUM_FRAMES = 5
  const SCROLL_TRIGGER_THRESHOLD = 20

  const profilePic = document.getElementById(
    'profile-picture',
  ) as HTMLImageElement
  const sources = [
    profilePic.parentElement!.querySelector(
      'source[type="image/webp"]',
    ) as HTMLSourceElement,
    profilePic.parentElement!.querySelector(
      'source[type="image/avif"]',
    ) as HTMLSourceElement,
    profilePic.parentElement!.querySelector(
      'source[type="image/png"]',
    ) as HTMLSourceElement,
  ] as HTMLSourceElement[]
  const framesUrl = sources.map((s) =>
    JSON.parse(s.dataset.frames!),
  ) as string[][]

  // swaps the placeholder with the actual image
  for (let i = 0; i < sources.length; i++) {
    sources[i].srcset = framesUrl[i][0]
  }

  let isListeningToMusic = false
  // changes the image frame on scroll
  let lastScroll = 0
  let currentFrame = 0
  function updateProfilePic() {
    const frameOffset = isListeningToMusic ? 5 : 0
    for (let i = 0; i < sources.length; i++) {
      sources[i].srcset = framesUrl[i][currentFrame + frameOffset]
    }
    profilePic.src = framesUrl[PNG][currentFrame + frameOffset]
  }

  window.addEventListener('scroll', () => {
    let scrollDiff = lastScroll - window.scrollY
    if (Math.abs(scrollDiff) > SCROLL_TRIGGER_THRESHOLD) {
      const direction = window.scrollY > lastScroll ? 1 : -1
      currentFrame = (currentFrame + direction) % PROFILE_NUM_FRAMES
      if (currentFrame < 0) {
        currentFrame = PROFILE_NUM_FRAMES - 1
      }
      updateProfilePic()
      lastScroll = window.scrollY
    }
  })

  // music player
  let lastPlayingUrl = ''
  const music = document.getElementById('music') as HTMLDivElement
  const musicImage = music.querySelector('#music-image') as HTMLImageElement
  const musicName = music.querySelector('#music-name') as HTMLSpanElement
  const musicArtistName = music.querySelector(
    '#music-artist-name',
  ) as HTMLSpanElement
  const musicAlbum = music.querySelector('#music-album') as HTMLSpanElement

  async function nowPlaying() {
    try {
      const response = await fetch('https://fm.loige.co/playing', {
        mode: 'cors',
        method: 'GET',
      })
      const data = await response.json()
      return data.now_playing
    } catch (_e) {
      // ignore errors
    }
  }

  async function cleanPlayerAnimations() {
    music.classList.remove('animate-fade-in-up')
    music.classList.remove('animate-fade-out-down')
    music.classList.remove('animate-fade-in-right')
    music.classList.remove('animate-fade-out-left')
    await new Promise((resolve) => setTimeout(resolve, 10))
  }

  async function animatePlayer(
    animation: 'in' | 'out' | 'change',
    updateDetailsFn: () => void,
  ) {
    await cleanPlayerAnimations()
    if (animation === 'in') {
      updateDetailsFn()
      music.classList.remove('hidden')
      music.classList.add('animate-fade-in-up')
      await new Promise((resolve) => setTimeout(resolve, 200))
    } else if (animation === 'out') {
      music.classList.add('animate-fade-out-down')
      await new Promise((resolve) => setTimeout(resolve, 200))
      music.classList.add('hidden')
    } else if (animation === 'change') {
      music.classList.add('animate-fade-out-left')
      await new Promise((resolve) => setTimeout(resolve, 200))
      updateDetailsFn()
      music.classList.remove('animate-fade-out-left')
      music.classList.add('animate-fade-in-right')
      await new Promise((resolve) => setTimeout(resolve, 200))
    }
  }

  async function updateNowPlaying() {
    const playing = await nowPlaying()
    isListeningToMusic = playing !== null
    updateProfilePic()

    const updateDetails = () => {
      if (playing) {
        const coverSrc = playing?.image?.large || '/loige/no-music-cover.png'
        const name = playing?.name || '(no name)'
        const artistName = playing?.artist?.name || '(no artist)'
        const album = playing?.album || '(no album)'

        musicImage.src = coverSrc
        musicImage.alt = `Album cover for ${album} by ${artistName}`
        musicName.textContent = name
        musicName.title = name
        musicArtistName.textContent = artistName
        musicArtistName.title = artistName
        musicAlbum.textContent = album
        musicAlbum.title = album
      }
    }

    // handle transitions
    if (lastPlayingUrl === '' && playing) {
      // started playing, fade from below
      await animatePlayer('in', updateDetails)
    } else if (lastPlayingUrl !== '' && !playing) {
      // stopped playing, fade to below
      await animatePlayer('out', updateDetails)
    } else if (lastPlayingUrl !== '' && lastPlayingUrl !== playing?.url) {
      // changed song, fade out to left, fade in from right
      await animatePlayer('change', updateDetails)
    } else {
      // same song or no song, no transition
    }

    if (playing) {
      lastPlayingUrl = playing?.url || ''
    } else {
      lastPlayingUrl = ''
    }

    setTimeout(updateNowPlaying, 10000)
  }

  updateNowPlaying()
</script>
